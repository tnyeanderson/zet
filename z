#!/bin/bash

############################################
#### WAITING FOR GO VERSION FROM RWXROB ####
############################################

IFS= read -rd '' USAGE <<EOF

Zettel helper script.

Usage:

    z h|help              : Show this help screen
    z c|create TITLE...   : Create a new zettel
    z e|edit   QUERY...   : Search for a zettel and edit it
    z p|print  QUERY...   : Search for a zettel and print it
    z push                : Push changes to github
    z s|search QUERY...   : Print IDs and titles of zettels matching QUERY
		z u|url    QUERY...   : Search for a zettel and print its github url
    z v|view   QUERY...   : Search for a zettel and view it
    z id       QUERY...   : Search for a zettel and display its ID

EOF

COMMAND=$1
shift

ZETDIR="${ZETDIR:-.}"
ZET_LIST=()
SELECTED_ZET=''

show_usage() {
	echo "$USAGE"
}

new_zid() {
	date '+%Y%m%d%H%M%S'
}

cmd_create() {
	TITLE="$*"
	create_zettel "${TITLE^}"
}

cmd_search() {
	parse_zet_list < <(search_zettel "$@")
	printf '%s\n' "${ZET_LIST[@]}"
}

cmd_edit() {
	parse_zet_list < <(search_zettel "$@")
	select_zet
	edit_zet "$SELECTED_ZET"
}

cmd_print() {
	parse_zet_list < <(search_zettel "$@")
	select_zet
	print_zettel "$SELECTED_ZET"
	echo
	echo "Zettel: $SELECTED_ZET"
}

cmd_push() {
	git push
}

cmd_view() {
	parse_zet_list < <(search_zettel "$@")
	select_zet
	view_zettel "$SELECTED_ZET"
}

cmd_id() {
	parse_zet_list < <(search_zettel "$@")
	select_zet
	echo "$SELECTED_ZET"
}

cmd_url() {
	parse_zet_list < <(search_zettel "$@")
	select_zet
	echo "https://$(get_repo_url)/tree/main/$SELECTED_ZET"
}

create_zettel() {
	TITLE="$1"
	ZID=$(new_zid)
	README="$ZID/README.md"
	mkdir -p "$ZID"
	echo "# $TITLE" >"$README"
	edit_file "$README"
	on_save "$ZID" "CREATED"
}

on_save() {
	ZID=$1
	MESSAGE_PREFIX=$2
	if [[ -s "$ZID/README.md" ]]; then
		TITLE=$(get_title "$ZID")
		commit_zettel "$ZID" "$MESSAGE_PREFIX $TITLE"
	else
		echo "File empty. Deleting empty zettel: $ZID"
		delete_zettel "$ZID"
	fi
}

delete_zettel() {
	[[ -d "$ZID" ]] && rm -rf "$ZID"
	commit_zettel "$ZID" "DELETED $ZID"
}

search_zettel() {
	if [[ "$*" == 'latest' ]] || [[ "$*" == 'l' ]]; then
		get_latest_zettel
		return
	fi
	# shellcheck disable=SC2001
	QUERY=$(sed -e 's/\s\+/|/g' <<<"$*")
	git grep -i --name-only -E "$QUERY" | grep -o -E '[0-9]{14}' | sort | uniq
}

parse_zet_list() {
	ZET_LIST=()
	while IFS= read -r ZID; do
		TITLE=$(get_title "$ZID")
		ZET_LIST+=("$ZID $TITLE")
	done
}

get_latest_zettel() {
	find . -maxdepth 1 -type d -name '[0-9]*' -printf '%f\n' | sort -r | head -n 1
}

select_zet() {
	if [[ "${#ZET_LIST[@]}" == 0 ]]; then
		echo "No zettels to select"
		exit 1
	fi
	if [[ "${#ZET_LIST[@]}" == 1 ]]; then
		SELECTED_ZET=$(awk '{ print $1 }' <<<"${ZET_LIST[0]}")
		return
	fi
	selector
	if [[ -z "$SELECTED_ZET" ]]; then
		echo "No zet selected"
		exit 1
	fi
}

selector() {
	num=1
	for ITEM in "${ZET_LIST[@]}"; do
		echo "${num}) $ITEM" >&2
		((num++))
	done
	read -rp 'Select a zet: ' ZET_NUM
	((ZET_NUM--))
	SELECTED_ZET=$(awk '{ print $1 }' <<<"${ZET_LIST[$ZET_NUM]}")
}

get_title_from_file() {
	head -n 1 "$1" | sed -e 's/^# //'
}

get_title() {
	ZID=$1
	get_title_from_file "$ZID/README.md"
}

commit_zettel() {
	ZID=$1
	MESSAGE=$2
	if [[ -z "$MESSAGE" ]]; then
		head -n 1 <"$ZID/README.md" | sed -e 's/^# //'
	fi
	git add "$ZID"
	git commit -m "$MESSAGE"
}

print_zettel() {
	ZID=$1
	cat "$ZID/README.md"
}

view_zettel() {
	ZID=$1
	view "$ZID/README.md"
}

edit_zet() {
	ZID=$1
	README="$ZID/README.md"
	if [[ -f "$README" ]]; then
		edit_file "$README"
		on_save "$ZID" "EDITED"
	else
		echo "File does not exist: $README" >&2
		exit 1
	fi
}

edit_file() {
	if is_vscode_terminal; then
		edit_in_vscode "$1"
	else
		edit_in_vim "$1"
	fi
}

is_vscode_terminal() {
	grep VSCODE <(env) &>/dev/null
}

edit_in_vscode() {
	code -w "$1"
}

edit_in_vim() {
	vim "$1"
}

get_repo_url() {
	grep -o 'github\.com.*\.git' <.git/config | tr : / | sed 's/\.git$//'
}

main() {
	case "$COMMAND" in
	c | create)
		cmd_create "$@"
		;;
	s | search)
		cmd_search "$@"
		;;
	e | edit)
		cmd_edit "$@"
		;;
	p | print)
		cmd_print "$@"
		;;
	push)
		cmd_push
		;;
	u | url)
		cmd_url "$@"
		;;
	v | view)
		cmd_view "$@"
		;;
	id)
		cmd_id "$@"
		;;
	h | help)
		show_usage
		;;
	*)
		echo 'ERROR: Command not found'
		show_usage
		;;
	esac
}

(cd "$ZETDIR" && main "$@")
